#!/usr/bin/env racket
#lang racket/base

(require
  racket/list
  racket/function
  racket/match
  racket/contract/base
  command-tree
  "libgpod.rkt")

(define (push-file ipod file-path)
  ;;(push-track ipod track)
  'TODO)

(define (push-album ipod folder-path)
  'TODO)

(define (push-artist ipod folder-path)
  'TODO)

(define (push-folder ipod folder-path)
  (for-each (curry push-file ipod)
            (get-music-files folder-path)))

(define (get-music-files folder-path)
  '(TODO))

;; we curry methods instead of running them directly in the command tree
(define (cmd proc)
  (lambda args
    (if (empty? args)
        proc
        (apply curryr (cons proc args)))))

(define commands
  `([info ,(cmd ipod-info)]
    [list (albums ,(cmd list-albums))
          (artists ,(cmd list-artists))
          (tracks ,(cmd list-tracks))]
    [push (album ,(cmd push-album))
          (artist ,(cmd push-artist))
          (track ,(cmd push-track))]
    [delete (track ,(cmd delete-track))]))

(define mount-point (current-directory))
(define ipod (open-ipod mount-point))
(define arguments (vector->list (current-command-line-arguments)))

((command-tree commands arguments) 'ipod)
(close-ipod ipod)
