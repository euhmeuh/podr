#!/usr/bin/env racket
#lang racket/base

(require
  racket/list
  racket/function
  racket/match
  racket/contract/base
  "libgpod.rkt")

(define (push-file ipod file-path)
  ;;(push-track ipod track)
  'TODO)

(define (push-album ipod folder-path)
  'TODO)

(define (push-artist ipod folder-path)
  'TODO)

(define (push-folder ipod folder-path)
  (for-each (curry push-file ipod)
            (get-music-files folder-path)))

(define (get-music-files folder-path)
  '(TODO))

(define command-tree
  `([info ,ipod-info]
    [list (albums ,list-albums)
          (artists ,list-artists)
          (tracks ,list-tracks)]
    [push (album ,push-album)
          (artist ,push-artist)
          (track ,push-track)]
    [delete (track ,delete-track)]))

(define (get-command tree arg)
  (match (assq (string->symbol arg) tree)
    [(list name proc) #:when (procedure? proc) proc]
    [(cons name tree) tree]
    [_ #f]))

(define (error-and-display-available-commands title tree)
  (raise-user-error
    title
    "Available commands are: ~a" (map car tree)))

(define (handle-arguments tree arguments)
  (when (empty? arguments)
    (error-and-display-available-commands 'missing-sub-command tree))
  (define command (get-command tree (car arguments)))
  (cond
    [(procedure? command)
     (if (empty? (cdr arguments))
         command
         (apply curryr (cons command (cdr arguments))))]
    [(list? command)
     (handle-arguments command (cdr arguments))]
    [else
     (error-and-display-available-commands 'unknown-command tree)]))

(define mount-point (current-directory))
(define ipod (open-ipod mount-point))
(define arguments (vector->list (current-command-line-arguments)))

((handle-arguments command-tree arguments) ipod)
(close-ipod ipod)
